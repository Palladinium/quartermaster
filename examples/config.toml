[server]
## The root URL through which this registry can be reached.
## This is required, and it will be used to populate the response for the /index/config.json file.
root_url = "http://foo.bar/"

## Addresses to bind to. Defaults to 0.0.0.0:80 and [::]:80.
bind = ["10.1.1.1:80"]

[auth]

## Disable auth entirely, and allow all requests. This is generally a bad idea.
# type = "none"

## Simple auth based on a list of valid tokens.
## Tokens can be any string that's sufficiently long and hard to guess - a strong password works too.
## Here's one of many possible ways to generate a token on Linux:
## $ openssl rand -base64 48
type = "token_list"
tokens = []

[storage]

## Local filesystem storage

type = "local"
path = "/crates"

## S3-backed storage.
## The bucket and region keys are required.
# type = "s3"
# bucket = "my-crates"
# region = "ap-southeast-2"

## Explicit access/secret key authentication, and optionally a security and session token.
# aws_access_key_id = "foo"
# aws_secret_access_key = "shoosh"
# aws_security_token = "foo"
# aws_session_token = "foo"

## Fetch access key through an STS request.
## The unprefixed `AWS_ROLE_ARN` `AWS_WEB_IDENTITY_TOKEN_FILE` environment variables are also checked if the corresponding config value isn't set.
# sts_session_name = "quartermaster"
# sts_role_arn = "foo"
# sts_web_identity_token_file = "foo"

## Use profile credentials. This reads from ~/.aws/credentials.
## If profile_section is specified, use that particular section in the credential file.
# use_profile_credentials = true
# profile_section = "quartermaster"

## Use instance credentials.
# use_instance_credentials = true
